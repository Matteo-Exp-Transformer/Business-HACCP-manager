#!/usr/bin/env node

import { execSync } from 'child_process'
import { writeFileSync, readFileSync } from 'fs'
import { join } from 'path'

// Get git information
function getGitInfo() {
  try {
    const gitCommit = execSync('git rev-parse HEAD', { encoding: 'utf8' }).trim()
    const gitBranch = execSync('git rev-parse --abbrev-ref HEAD', { encoding: 'utf8' }).trim()
    const gitCommitShort = gitCommit.substring(0, 8)
    
    return {
      commit: gitCommit,
      commitShort: gitCommitShort,
      branch: gitBranch
    }
  } catch (error) {
    console.warn('Could not get git info:', error.message)
    return {
      commit: 'unknown',
      commitShort: 'unknown',
      branch: 'unknown'
    }
  }
}

// Get package version
function getPackageVersion() {
  try {
    const packageJson = JSON.parse(readFileSync('package.json', 'utf8'))
    return packageJson.version || '1.0.0'
  } catch (error) {
    console.warn('Could not read package.json:', error.message)
    return '1.0.0'
  }
}

// Generate build number
function generateBuildNumber() {
  const now = new Date()
  const year = now.getFullYear().toString().slice(-2)
  const month = (now.getMonth() + 1).toString().padStart(2, '0')
  const day = now.getDate().toString().padStart(2, '0')
  const hour = now.getHours().toString().padStart(2, '0')
  const minute = now.getMinutes().toString().padStart(2, '0')
  
  return `${year}${month}${day}.${hour}${minute}`
}

// Main function
function generateBuildInfo() {
  const git = getGitInfo()
  const version = getPackageVersion()
  const buildNumber = generateBuildNumber()
  const buildTime = new Date().toISOString()
  const environment = process.env.VITE_APP_ENV || 'development'
  
  const buildInfo = {
    version,
    buildTime,
    buildNumber,
    gitCommit: git.commit,
    gitCommitShort: git.commitShort,
    gitBranch: git.branch,
    environment,
    builtBy: 'HACCP Build System',
    nodeVersion: process.version,
    buildId: `${git.commitShort}-${buildNumber}`
  }
  
  // Write to public directory for runtime access
  const buildInfoPath = join(process.cwd(), 'public', 'build-info.json')
  writeFileSync(buildInfoPath, JSON.stringify(buildInfo, null, 2))
  
  // Write to src for compile-time access
  const buildInfoTsPath = join(process.cwd(), 'src', 'generated', 'buildInfo.ts')
  const buildInfoTs = `// Auto-generated build information
// Do not edit this file manually

export const BUILD_INFO = ${JSON.stringify(buildInfo, null, 2)} as const

export default BUILD_INFO
`
  
  // Create generated directory if it doesn't exist
  try {
    execSync('mkdir -p src/generated')
  } catch (error) {
    // Directory might already exist
  }
  
  writeFileSync(buildInfoTsPath, buildInfoTs)
  
  console.log('‚úÖ Build info generated:', buildInfo.buildId)
  console.log('üì¶ Version:', buildInfo.version)
  console.log('üåø Branch:', buildInfo.gitBranch)
  console.log('üìù Commit:', buildInfo.gitCommitShort)
  console.log('üåç Environment:', buildInfo.environment)
  
  return buildInfo
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  generateBuildInfo()
}

export { generateBuildInfo }